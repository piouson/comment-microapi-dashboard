{"version":3,"sources":["components/Dashboard.js","services/authProvider.js","services/adminProvider.js","components/Admins.js","components/App.js","serviceWorker.js","index.js"],"names":["Card","CardHeader","title","CardContent","login","a","username","password","request","Request","method","body","JSON","stringify","email","headers","fetch","then","res","status","Error","statusText","json","data","localStorage","setItem","systemToken","logout","removeItem","Promise","resolve","checkError","reject","checkAuth","getItem","getPermissions","apiUrl","httpClient","url","options","Headers","Accept","set","fetchUtils","fetchJson","convertOne","id","msAdminId","convertMany","map","item","getList","resource","params","total","length","getOne","getMany","getManyReference","update","updateMany","query","filter","ids","create","delete","deleteMany","AdminList","props","isSmall","useMediaQuery","theme","breakpoints","down","List","label","SimpleList","primaryText","record","secondaryText","views","tertiaryText","Date","published_at","toLocaleDateString","Datagrid","rowClick","TextField","source","EmailField","AdminEdit","Edit","SimpleForm","TextInput","disabled","AdminCreate","Create","ReferenceInput","reference","SelectInput","optionText","App","Admin","dashboard","Dashboard","authProvider","dataProvider","adminProvider","Resource","name","list","edit","icon","UserIcon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.531d2571.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardContent, CardHeader } from '@material-ui/core';\r\n\r\nexport default () => (\r\n  <Card>\r\n    <CardHeader title=\"Welcome to Admin Dashboard\" />\r\n    <CardContent>This is the dashboard area</CardContent>\r\n  </Card>\r\n);","const loginUrl = 'https://comments-microservice.herokuapp.com/v1/msadmins/login';\r\n\r\nexport default {\r\n  login: async ({ username, password }) => {\r\n    const request = new Request(loginUrl, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email: username, password }),\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n    return fetch(request)\r\n      .then(res => {\r\n        if (res.status < 200 || res.status >= 300) {\r\n          throw new Error(res.statusText);\r\n        }\r\n        return res.json();\r\n      })\r\n      .then(({ data }) => {\r\n        localStorage.setItem('systemToken', data.systemToken);\r\n      });\r\n  },\r\n  logout: () => {\r\n    localStorage.removeItem('systemToken');\r\n    return Promise.resolve();\r\n  },\r\n  checkError: ({ status }) => {\r\n    if (status === 401 || status === 403) {\r\n      localStorage.removeItem('systemToken');\r\n      return Promise.reject();\r\n    }\r\n    return Promise.resolve();\r\n  },\r\n  checkAuth: () => {\r\n    return localStorage.getItem('systemToken')\r\n      ? Promise.resolve()\r\n      : Promise.reject();\r\n  },\r\n  getPermissions: () => Promise.resolve(),\r\n}\r\n","import { fetchUtils } from 'react-admin';\r\nimport { stringify } from 'query-string';\r\n\r\nconst apiUrl = 'https://comments-microservice.herokuapp.com/v1';\r\nconst httpClient = (url, options = {}) => {\r\n  if (!options.headers) {\r\n    options.headers = new Headers({ Accept: 'application/json' });\r\n  }\r\n  const systemToken = localStorage.getItem('systemToken');\r\n  options.headers.set('Authorization', `Bearer ${systemToken}`);\r\n  return fetchUtils.fetchJson(url, options);\r\n};\r\n\r\nconst convertOne = data => ({ ...data, id: data.msAdminId });\r\nconst convertMany = data => data.map(item => ({ ...item, id: item.msAdminId }));\r\n\r\nexport default {\r\n  getList: (resource, params) => {\r\n    const url = `${apiUrl}/${resource}`;\r\n\r\n    return httpClient(url).then(({ json }) => ({\r\n      data: convertMany(json.data),\r\n      total: json.data.length,\r\n    }));\r\n  },\r\n\r\n  getOne: (resource, params) =>\r\n    httpClient(`${apiUrl}/${resource}/${params.id}`).then(({ json }) => ({\r\n      data: convertOne(json.data),\r\n    })),\r\n\r\n  getMany: (resource, params) => {\r\n    const url = `${apiUrl}/${resource}`;\r\n    return httpClient(url).then(({ json }) => ({ data: convertMany(json.data) }));\r\n  },\r\n\r\n  getManyReference: (resource, params) => {\r\n    const url = `${apiUrl}/${resource}`;\r\n\r\n    return httpClient(url).then(({ json }) => ({\r\n      data: convertMany(json.data),\r\n      total: json.data.length,\r\n    }));\r\n  },\r\n\r\n  update: (resource, params) =>\r\n    httpClient(`${apiUrl}/${resource}`, {\r\n      method: 'PATCH',\r\n      body: JSON.stringify(params.data),\r\n    }).then(({ json }) => ({ data: convertOne(json.data) })),\r\n\r\n  updateMany: (resource, params) => {\r\n    const query = {\r\n      filter: JSON.stringify({ id: params.ids }),\r\n    };\r\n    return httpClient(`${apiUrl}/${resource}?${stringify(query)}`, {\r\n      method: 'PATCH',\r\n      body: JSON.stringify(params.data),\r\n    }).then(({ json }) => ({ data: convertMany(json.data) }));\r\n  },\r\n\r\n  create: (resource, params) =>\r\n    httpClient(`${apiUrl}/${resource}`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(params.data),\r\n    }).then(({ json }) => ({\r\n      data: convertOne(json.data),\r\n    })),\r\n\r\n  delete: (resource, params) =>\r\n    httpClient(`${apiUrl}/${resource}/${params.id}`, {\r\n      method: 'DELETE',\r\n    }).then(({ json }) => ({ data: convertMany(json.data) })),\r\n\r\n  deleteMany: (resource, params) => {\r\n    const query = {\r\n      filter: JSON.stringify({ id: params.ids }),\r\n    };\r\n    return httpClient(`${apiUrl}/${resource}?${stringify(query)}`, {\r\n      method: 'DELETE',\r\n      body: JSON.stringify(params.data),\r\n    }).then(({ json }) => ({ data: convertMany(json.data) }));\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { useMediaQuery } from '@material-ui/core';\r\nimport {\r\n  List, Datagrid, TextField, EmailField, SimpleList,\r\n  SimpleForm, Edit, TextInput, Create, ReferenceInput,\r\n  SelectInput,\r\n} from \"react-admin\";\r\n\r\nexport const AdminList = props => {\r\n  const isSmall = useMediaQuery((theme) => theme.breakpoints.down('sm'));\r\n\r\n  return (\r\n    <List label=\"Admins\" {...props}>\r\n      {isSmall ? (\r\n        <SimpleList\r\n          primaryText={record => record.title}\r\n          secondaryText={record => `${record.views} views`}\r\n          tertiaryText={record => new Date(record.published_at).toLocaleDateString()}\r\n        />\r\n      ) : (\r\n          <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"msAdminId\" />\r\n            <TextField source=\"fullname\" />\r\n            <EmailField source=\"email\" />\r\n            <TextField source=\"role\" />\r\n          </Datagrid>\r\n        )}\r\n    </List>)\r\n};\r\n\r\nexport const AdminEdit = props => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput disabled source=\"id\" />\r\n      <TextInput source=\"msAdminId\" />\r\n      <TextInput source=\"fullname\" />\r\n      <TextInput source=\"email\" />\r\n      <TextInput source=\"role\" />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n\r\nexport const AdminCreate = props => (\r\n  <Create label=\"Create\" {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"fullname\" />\r\n      <TextInput source=\"email\" />\r\n      <TextInput source=\"password\" />\r\n      <ReferenceInput source=\"role\" reference=\"msadmins\">\r\n        <SelectInput optionText=\"role\" />\r\n      </ReferenceInput>\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n","import React from 'react';\nimport { Admin, Resource } from 'react-admin';\nimport Dashboard from './Dashboard';\nimport authProvider from '../services/authProvider';\nimport adminProvider from '../services/adminProvider';\nimport UserIcon from '@material-ui/icons/Group';\nimport { AdminList, AdminEdit, AdminCreate } from './Admins';\n\nfunction App() {\n  return (\n    <Admin\n      dashboard={Dashboard}\n      authProvider={authProvider}\n      dataProvider={adminProvider}\n    >\n      <Resource\n        name=\"msadmins\"\n        list={AdminList}\n        edit={AdminEdit}\n        create={AdminCreate}\n        icon={UserIcon}\n      />\n    </Admin>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}